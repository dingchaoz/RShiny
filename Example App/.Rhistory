strsplit(header1,split = " ")
strsplit(header1,split = " ")
gsub("[[:space:]]", "", header1,fixed = true)
gsub("[[:space:]]", "", header1,fixed = True)
gsub("[[:space:]]", "", header1,fixed = T)
x <- strsplit(header1,split = " ")[[1]]
x
len(x)
dim(x)
length(x)
myfunction <- function(x) {
for (i in 0:length(x)){
if (x[i] != ""){
l <- c(list,x[i])
}
}
myfunction <- function(x) {
for (i in 0:length(x)){
if (x[i] != ""){
l <- c(list,x[i])
}
}
}
myfunction <- function(x) {
for (i in 0:length(x)){
if (x[i] != ""){
l <- c(list,x[i])
}
}
return l
}
myfunction <- function(x) {
for (i in 0:length(x)){
if (x[i] != ""){
l <- c(list,x[i])
}
}
}
y <- myfunction(header1)
y <- myfunction(header1[[1]])
y <- myfunction(x)
x
x[0]
x[1]
myfunction <- function(x) {
for (i in 1:length(x)){
if (x[i] != ""){
l <- c(list,x[i])
}
}
}
y <- myfunction(x)
y
l
print(l)
print (x)
length(header1)
source('~/Dingchao/Courses/R/RShinyDash/Dashboard/App.R')
install.package(dplyr)
install.packages(dplyr)
install.packages("dplyr")
source('~/Dingchao/Courses/R/RShinyDash/Dashboard/App.R')
getwd()
setwd("C:/Users/ks692/Documents/Dingchao/Courses/R/RShinyDash")
source('~/Dingchao/Courses/R/RShinyDash/Dashboard/App.R')
getwd()
source('~/Dingchao/Courses/R/RShinyDash/Dashboard/App.R')
conn
conn2 <- odbcConnect(case=nochange
DSN=Capability
UID=
Trusted_Connection=Yes
APP=RStudio
WSID=L4-S149242
DATABASE=HDPacific)
conn2 <- odbcConnect(
DSN=Capability
UID=
Trusted_Connection=Yes
APP=RStudio
WSID=L4-S149242
DATABASE=HDPacific)
source('~/Dingchao/Courses/R/RShinyDash/Dashboard/App.R')
source('~/Dingchao/Courses/R/RShinyDash/Dashboard/App.R')
SoftwareBuild <- sqlQuery(conn,paste("Select distinct calibration from",PrgMap$Database[[1]], " .dbo.tblDataInBuild"))
source('~/Dingchao/Courses/R/RShinyDash/Dashboard/App.R', echo=TRUE)
source('~/Dingchao/Courses/R/RShinyDash/Dashboard/App.R')
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
getwd()
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/app.R')
install.packages("shinyjs")
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/app.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/app.R')
setwd('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/app.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/app.R')
shinyApp(ui = ui, server = server)
getwd()
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/app.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/app.R')
setwd('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/app.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/app2.R')
shinyApp(ui, server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/app2.R')
shinyApp(ui, server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/app2.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/app.R')
getwd()
shinyApp()
shinyApp(ui, server)
server = function(input, output) {
onclick("update", text("time", date()))
onclick("toggleAdvanced", toggle(id = "advanced", anim = TRUE))
observe({
toggleClass("myapp", "big", input$big)
})
observe({
toggleState("submit", !is.null(input$name) && input$name != "")
})
observeEvent(input$submit, {
info("Thank you!")
})
observeEvent(input$reset, {
reset("myapp")
})
}
shinyApp(ui, server)
ui = fixedPage(
useShinyjs(),
inlineCSS(list(.big = "font-size: 2em",
a = "cursor: pointer")),
fixedRow(
column(6, wellPanel(
div(id = "myapp",
h2("shinyjs demo"),
checkboxInput("big", "Bigger text", FALSE),
textInput("name", "Name", ""),
a(id = "toggleAdvanced", "Show/hide advanced info"),
hidden(
div(id = "advanced",
numericInput("age", "Age", 30),
textInput("company", "Company", "")
)
),
p("Timestamp: ",
span(id = "time", date()),
a(id = "update", "Update")
),
actionButton("submit", "Submit"),
actionButton("reset", "Reset form")
),
br(), br()
)),
column(6,
getHelperText()
)
)
),
ui = fixedPage(
useShinyjs(),
inlineCSS(list(.big = "font-size: 2em",
a = "cursor: pointer")),
fixedRow(
column(6, wellPanel(
div(id = "myapp",
h2("shinyjs demo"),
checkboxInput("big", "Bigger text", FALSE),
textInput("name", "Name", ""),
a(id = "toggleAdvanced", "Show/hide advanced info"),
hidden(
div(id = "advanced",
numericInput("age", "Age", 30),
textInput("company", "Company", "")
)
),
p("Timestamp: ",
span(id = "time", date()),
a(id = "update", "Update")
),
actionButton("submit", "Submit"),
actionButton("reset", "Reset form")
),
br(), br()
)),
column(6,
getHelperText()
)
)
ui = fixedPage(
useShinyjs(),
inlineCSS(list(.big = "font-size: 2em",
a = "cursor: pointer")),
fixedRow(
column(6, wellPanel(
div(id = "myapp",
h2("shinyjs demo"),
checkboxInput("big", "Bigger text", FALSE),
textInput("name", "Name", ""),
a(id = "toggleAdvanced", "Show/hide advanced info"),
hidden(
div(id = "advanced",
numericInput("age", "Age", 30),
textInput("company", "Company", "")
)
),
p("Timestamp: ",
span(id = "time", date()),
a(id = "update", "Update")
),
actionButton("submit", "Submit"),
actionButton("reset", "Reset form")
),
br(), br()
)),
column(6,
getHelperText()
)
)
)
ui = fixedPage(
useShinyjs(),
inlineCSS(list(.big = "font-size: 2em",
a = "cursor: pointer")),
fixedRow(
column(6, wellPanel(
div(id = "myapp",
h2("shinyjs demo"),
checkboxInput("big", "Bigger text", FALSE),
textInput("name", "Name", ""),
a(id = "toggleAdvanced", "Show/hide advanced info"),
hidden(
div(id = "advanced",
numericInput("age", "Age", 30),
textInput("company", "Company", "")
)
),
p("Timestamp: ",
span(id = "time", date()),
a(id = "update", "Update")
),
actionButton("submit", "Submit"),
actionButton("reset", "Reset form")
),
br(), br()
)),
column(6,
getHelperText()
)
)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/app.R')
shinyjs::runExample()
shinyjs::
shinyjs()
shinyApp(ui, server)
server = function(input, output) {
}
shinyApp(ui, server)
ui = fluidPage(
div(id = "myapp",
h2("shinyjs demo"),
textInput("name", "Name", ""),
numericInput("age", "Age", 30),
textInput("company", "Company", ""),
p("Timestamp: ", span(date())),
actionButton("submit", "Submit")
)
shinyApp(
ui = fluidPage(
div(id = "myapp",
h2("shinyjs demo"),
textInput("name", "Name", ""),
numericInput("age", "Age", 30),
textInput("company", "Company", ""),
p("Timestamp: ", span(date())),
actionButton("submit", "Submit")
)
),
server = function(input, output) {
}
)
runApp('app.R')
runApp('myapp')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/app.R')
runApp('myapp')
library(shiny)
runApp("myapp")
getwd()
runApp("C:/Users/ks692/Documents/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest")
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/app.R')
runApp("C:/Users/ks692/Documents/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest")
shiny::runGitHub("shiny-js-examples", "jcheng5", subdir="output")
getwd()
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/app.R')
setwd('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/app.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/app3.R')
install.packages('shinydashboard')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/app3.R')
shinyApp(ui, server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/app2.R')
shinyApp(ui, server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/app2.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/app2.R')
shinyApp(ui, server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/app2.R')
shinyApp(ui, server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/app2.R')
shinyApp(ui, server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/app.R')
runApp("C:/Users/ks692/Documents/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest")
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/helper-text.R')
runApp("C:/Users/ks692/Documents/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest")
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/helper-text.R')
runApp("C:/Users/ks692/Documents/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest")
runApp("C:/Users/ks692/Documents/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/shiny-examples-master/054-nvd3-line-chart-output")
x <- "test test2 test3"
y <- strsplit(x," ")
y
y[1]
y[1][1]
y[[1]][1]
y[[1]][2]
z <- tapply(y,seq(1:len(y)),paste, collapse = "")
z <- tapply(y,seq(1:length(y)),paste, collapse = "")
z
z <- tapply(y,seq(1:length(y)),paste, collapse = " ")
z
z <- tapply(y,seq(1:length(y)),paste)
z
runApp("C:/Users/ks692/Documents/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest")
runApp("C:/Users/ks692/Documents/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/shiny-examples-master/054-nvd3-line-chart-output")
source('~/Dingchao/Courses/R/RShinyDash/Dashboard/App.R')
source('~/Dingchao/Courses/R/RShinyDash/Dashboard/App.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/RShinyDash/Dashboard/App.R')
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
getwd()
source('~/Dingchao/Courses/R/RShinyDash/Dashboard/App.R')
getwd()
setwd("C:/Users/ks692/Documents/Dingchao/Courses/R/R Programming/RShinyDash/Example App")
setwd("C:/Users/ks692/Documents/Dingchao/Courses/R/RShinyDash/Example App")
source('~/Dingchao/Courses/R/RShinyDash/Example App/Parsing_Playtxt.R')
data[[1]]
data
data[[273]]
data
data[[273]]
data[[273]]$Date
classof(data[[273]])
typeof(data)
typeof(data[[273]])
rawdata
rawdata[2]
rawdata[1]
line <- strsplit(rawdata[1],split="^\\s+")
line
line[[1]][1] == ""
line <- line[[1]][2] # Get the substance of the header
line <- rm_white(line)
line
header_components <- strsplit(line," ")[[1]]
header_components
header <- tapply(header_components,seq(1:length(header_components)),paste)
header
header$1
header[1]
header[2]
rawdata[2]
header
classof(header)
typeof(header)
typeof(header_components)
header[1]
header_components[1]
rawdata[2]
line <- strsplit(rawdata[2],split="^\\s+")
line
line <- line[[1]][1] # Get the substance of the parts
line <- rm_white(line) # Remove all extra white space but only leave one space between word in the line
line
parts_components <- strsplit(line," ")[[1]]
parts <- tapply(parts_components,seq(1:length(parts_components)),paste)
parts
parts_components
typeof(parts[1])
typeof(parts)
classof(parts)
class(parts)
class(parts_components)
class(parts_components[1])
parts_components[1]
parts_components[1] == parts[1]
(parts[1] %in% days
parts[1] %in% days
parts[1]
length(parts)
length(header)
parts
parts[1] <- paste(parts[1],parts[2], parts[3], sep = " ")
# Remove the 2nd, 3rd components which are already merged into the 1st component Date
parts <- parts[-c(2,3)]
parts
length(parts)
length(parts) == length(header)
df <- data.frame()
df <- rbind(df, parts)
df
names(df) <- header
df
df$Date
df$BSPM
data[[i]] <- df
i
data[[273]]
rawdata[12]
line <- strsplit(rawdata[12],split="^\\s+")
line <- line[[1]][1] # Get the substance of the parts
line <- rm_white(line)
line
parts_components <- strsplit(line," ")[[1]]
parts <- tapply(parts_components,seq(1:length(parts_components)),paste)
data
data[[273]]$Date == "Thu Oct 15,'15"
data(which$Date == "Thu Oct 15,'15")
data[which(data$Date) == "Thu Oct 15,'15"]
data[which(data$Date == "Thu Oct 15,'15")]
data("Thu Oct 15,'15") <- "test"
returndate <- function(date) {}
?lapply
length(data)
returndate <- function(date) {
for i in 1: length(data) {
if data[[i]] == date {
returndate <- i
return returndate
}
}
}
returndate <- function(date) {
for (i in 1: length(data)) {
if (data[[i]] == date) {
returndate <- i
return returndate
}
}
}
lapply(data,date)
lapply(data,paste($date))
data[["test"]] <- "test1"
data[["test"]]
date_var <- data[[273]]$Date
data[[date]] <- "test33"
data[[date_var]] <- "test33"
returndate <- function(date) {
for (i in 1: length(data)) {
if (data[[i]] == date) {
returndate <- i
return returndate
}
}
}
?function()
returndate <- function(date) {
for (i in 1: length(data)) {
if (data[[i]] == date) {
return i
}
}
}
returndate <- function(data,date) {
for (i in 1: length(data)) {
if (data[[i]] == date) {
return i
}
}
}
returndate <- function(data,date) {
for (i in 1: length(data)) {
if (data[[i]] == date) {
return (i)
}
}
}
returndate(data,data[[273]]$Date)
data[[273]]$Date
returndate(data,"Thu Oct 15,'15")
returndate <- function(data,date) {
date <- 0
for (i in 1: length(data)) {
if (data[[i]] == date) {
date <- c(date,i)
}
}
return (date)
}
returndate(data,"Thu Oct 15,'15")
returndate(data,"Thu Oct 15,'15")
returndate <- function(data,date) {
for (i in 1: length(data)) {
if (data[[i]] == date) {
return (i)
}
}
}
returndate(data,"Thu Oct 15,'15")
