install.packages("RCurl")
URL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
x <- getURL(URL)
library(RCurl)
URL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
getURL(URL)
file.edit('~/.Rprofile')
options(rpubs.upload.method = "internal")
library(RCurl)
getURL(URL)
getURL(URL, ssl.verifypeer = FALSE)
x <- getURL(URL,ssl.verifypeer = F)
install.packages('RSQLServer')
install.packages('RODBC')
library(RODBC)
dbhandle <- odbcDriverConnect('driver={SQL Server};server=W4-S129433\CAPABILITYDB;database=HDPacific;trusted_connection=true')
res <- sqlQuery(dbhandle, 'select * from information_schema.tables')
dbhandle <- odbcDriverConnect('driver={SQL Server};server=W4-S129433/CAPABILITYDB;database=HDPacific;trusted_connection=true')
dbhandle <- odbcDriverConnect('driver={SQL Server};server=\\W4-S129433\CAPABILITYDB;database=HDPacific;trusted_connection=true')
dbhandle <- odbcDriverConnect('driver={SQL Server};server=//W4-S129433/CAPABILITYDB;database=HDPacific;trusted_connection=true')
dbhandle <- odbcDriverConnect('driver={SQL Server};server= W4-S129433/CAPABILITYDB;database=HDPacific;trusted_connection=true')
res <- sqlQuery(dbhandle, 'select * from information_schema.tables')
dbhandle <- odbcDriverConnect('driver=SQL Server;server= W4-S129433/CAPABILITYDB;database=HDPacific;trusted_connection=true')
dbhandle <- odbcDriverConnect('driver={SQL Server};server= W4-S129433\\CAPABILITYDB;database=HDPacific;trusted_connection=true')
dbhandle <- odbcDriverConnect('driver={SQL Server};server= W4-S129433\\\\CAPABILITYDB;database=HDPacific;trusted_connection=true')
dbhandle <- odbcDriverConnect('driver={SQL Server};server= W4-S129433\\\\CAPABILITYDB,1443;database=HDPacific;trusted_connection=true')
dbhandle <- odbcDriverConnect('driver={SQL Server};server= W4-S129433\\CAPABILITYDB,1443;database=HDPacific;trusted_connection=true')
dbhandle <- odbcDriverConnect('driver={SQL Server};server= W4-S129433\CAPABILITYDB,1443;database=HDPacific;trusted_connection=true')
dbhandle <- odbcDriverConnect('driver={SQL Server};server= W4-S129433\\CAPABILITYDB,1443;database=HDPacific;trusted_connection=true')
library(RSQLServer)
install.packages('RSQLServer')
library(RSQLServer)
dbhandle <- dbconnect('SQLServer',Server = W4-S129433//CAPABILITYDB;Database = HDPacific;trusted_connection = T )
dbhandle <- dbconnect('SQLServer',Server = W4-S129433/CAPABILITYDB;Database = HDPacific;trusted_connection = T )
dbhandle <- dbconnect('SQLServer',Server = W4-S129433/CAPABILITYDB,Database = HDPacific;trusted_connection = T )
dbhandle <- dbconnect('SQLServer',Server = W4-S129433/CAPABILITYDB,Database = HDPacific,trusted_connection = T )
res <- sqlQuery(dbhandle, 'select * from information_schema.tables')
library(RSQLServer)
conn <- dbConnect(SQLServer(),'W4-s129433//capabilitydb')
m<-dbdriver('RODBC')
m<-dbDriver('RODBC')
library(RODBC)
m<-dbDriver('RODBC')
m<-dbDriver("RODBC")
ch <- dbConnect("Capability.dsn")
ch <- dbConnect(Capability.dsn)
ch <- dbConnect(Capability.dsn)
ch <- dbConnect('C:\Windows\ODBC.INI')
ch <- dbConnect('C:/Windows/ODBC.INI'
)
ch <- dbConnect(C:/Windows/ODBC.INI)
conn <- dbConnect("Capability",'trusted_connection = True')
conn <- dbConnect("Capability")
conn <- odbcConnect("Capability")
)
conn <- odbcConnect("Capability",uid = 'ku906',pwd = 'Motiva10')
conn
conn <- odbcConnect("Capability",Trusted_Connection = TRUE)
conn <- odbcConnect("Capability",'Trusted_Connection = TRUE')
conn
trucks <- sqlQuery(conn,"Select * FROM DragonCC.dbo.tblTrucks")
trucks
head(trucks)
library(RODBC)
conn <-dbconnect("Capability") # Capability is the ODBC name.
library(RSQLServer)
conn <-dbconnect("Capability")
conn <-odbcconnect("Capability")
conn <-odbcConnect("Capability")
remove()
remove(ls)
remove(ls())
ls()
rm
rm(list=ls())
library(RODBC)
conn <-odbcConnect("Capability")
conn
trucks <- sqlQuery(conn,'select * from Acadia.dbo.tblTrucks')
cals <- sqlquery(conn,'select * from Acadia.dbo.tblCals')
cals <- sqlQuery(conn,'select * from Acadia.dbo.tblCals')
url <- 'https://data.baltimorecity.gov/api/views/k5ry-ef3g/rows.csv?accessType=DOWNLOAD'
download.file(url,'./restdata.csv')
restdata <- read.csv('restdata.csv',header = T)
head(restdata)
x <- c(1,3,8,25,100); seq(along = x)
x
table(restdata$neighborhood)
quantile(rnorm(100))
install.packages("Hmisc")
install.packages("plyr")
shiny::runApp('Documents/Coursera_R/ExampleApp')
shiny::runApp('Documents/Coursera_R/ExampleApp')
shiny::runApp('Documents/Coursera_R/ExampleApp')
shiny::runApp('Documents/Coursera_R/ExampleApp')
shiny::runApp('Documents/Coursera_R/ExampleApp')
shiny::runApp('Documents/Coursera_R/ExampleApp')
shiny::runApp('Documents/Coursera_R/ExampleApp')
shiny::runApp('Documents/Coursera_R/ExampleApp')
shiny::runApp('Documents/Coursera_R/Example App')
shiny::runApp('Documents/Coursera_R/Example App')
shiny::runApp('Documents/Coursera_R/Example App')
shiny::runApp('Documents/Coursera_R/Example App')
shiny::runApp('Documents/Coursera_R/ExampleApp')
shiny::runApp('Documents/Coursera_R/ExampleApp')
library(RSQLServer)
conn <-odbcConnect("Capability") # Capability is the ODBC name.
# To remove rm(list=ls())
trucks <- sqlQuery(conn,'select * from Acadia.dbo.tblTrucks')
library(RODBC)
library(RSQLServer)
conn <-odbcConnect("Capability") # Capability is the ODBC name.
trucks <- sqlQuery(conn,'select * from Acadia.dbo.tblTrucks')
trucks
shiny::runApp('Documents/Coursera_R/ExampleApp')
shiny::runApp('Documents/Coursera_R/ExampleApp')
library(lattice)
library(ggplot2)
library(datasets)
airquality<-transform(airquality,Month=factor(Month))
xyplot(Ozone~Wind,airquality,main="Ozone Vs Wind")
xyplot(Ozone~Wind|Month,layout=c(3,2),airquality,main="Ozone Vs Wind") # Auto labeling which is not done in base plotting
stripplot(Ozone~Month,jitter.data=T,factor=0.5,data = airquality)
# Coloring by groups is a pain in the neck http://stackoverflow.com/questions/22920381/different-coloring-of-groups-in-r-plot
# try to solve the above pain using ggplot2
qplot(Month,Ozone,data=airquality,color = Month,geom="jitter")
# The jitter seems awful
qplot(Month,Ozone,data=airquality,color=Month,position = position_jitter(0.1,0.1), main = "Ozonw Vs Month") + theme_bw()
# theme_bw() was to set the background to white
qplot(Ozone,data=airquality,fill=Month) + theme_bw()
airquality <- na.omit(airquality)
means <- aggregate(airquality$Ozone,list(airquality$Month),mean)
str(mtcars)
unique(vs)
unique(mtcars$vs)
unique(mtcars$am)
qplot(mpg,wt,data=mtcars,facets = vs )
qplot(mpg,wt,data=mtcars,facets = ~vs )
p <- qplot(mpg,wt,data=mtcars,facets = ~vs )
hline.data <- data.frame(z=c(2,4), vs = unique(mtcars$vs))
p <- qplot(mpg,wt,data=mtcars,facets = ~vs )
p + geom_hline(aes(yintercept = z),hline.data)
g <- ggplot(aes(x=Solar.R,y=Ozone), data = airquality) + geom_point(aes(color = Month)) + facet_grid(.~Month)
unique(airquality$Month)
as.numeric(unique(airquality$Month))
hline.data2 <- data.frame(z=c(50,75,100,125,150),month=as.numeric(unique(airquality$Month)))
g + geom_hline(aes(yintercept = z),hline.data2)
h <- qplot(aes(x=Solar.R,y=Ozone), data = airquality) + geom_point(aes(color = Month)) + facet_grid(.~Month)
h + geom_hline(aes(yintercept = z),hline.data2)
h <- qplot(aes(x=Solar.R,y=Ozone), data = airquality) + geom_point(aes(color = Month)) + facet_grid(.~Month)
hline.data2 <- data.frame(z=c(50,75,100,125,150),month=as.numeric(unique(airquality$Month)))
h + geom_hline(aes(yintercept = z),hline.data2)
hline.data2 <- data.frame(z=c(50,75,100,125,150),month=as.numeric(unique(airquality$Month)))
h
<- ggplot(aes(x=Solar.R,y=Ozone), data = airquality) + geom_point(aes(color = Month)) + facet_grid(.~Month)
g <- ggplot(aes(x=Solar.R,y=Ozone), data = airquality) + geom_point(aes(color = Month)) + facet_grid(.~Month)
g
g + geom_abline(a=c(0,0,0,0),b=c(50,75,100,125,150))
g <- ggplot(aes(x=Solar.R,y=Ozone), data = airquality) + geom_point(aes(color = Month)) + facet_grid(.~Month)
g + geom_abline(b=c(0,0,0,0),a=c(50,75,100,125,150))
g + geom_abline(yintercept = c(50,75,100,125,150))
g
g + geom_hline(aes(yintercept=z),hline.data2)
g + geom_hline(hline.data2$z)
g + geom_hline(airquality$Month)
g + geom_hline(aes(yintercept = z))
g + geom_hline(aes(yintercept = z),hline.data2)
library(RSQLServer)
conn <-odbcConnect("Capability") # Capability is the ODBC name.
library(RODBC)
#ch <- dbConnect(C:/Windows/ODBC.INI)
#dbhandle <- odbcDriverConnect('driver={SQL Server};server= W4-S129433\\CAPABILITYDB,1443;database=HDPacific;trusted_connection=true')
#res <- sqlQuery(dbhandle, 'select * from information_schema.tables')
#ibrary(RSQLServer)
#m<-dbDriver("RODBC")
library(RSQLServer)
conn <-odbcConnect("Capability") # Capability is the ODBC name.
trucks <- sqlQuery(conn,'Select * FROM Seahawk.dbo.tblTrucks')
head(trucks)
shiny::runApp('Documents/Coursera_R/Dashboard')
shiny::runApp('Documents/Coursera_R/Dashboard')
PrgMap <- as.data.frame(Programs = c("Pick Up", "Chasis Cab"), Database = c("Seahawk", "DragonCC"))
PrgMap <- data.frame(Programs = c("Pick Up", "Chasis Cab"), Database = c("Seahawk", "DragonCC"))
PrgMap$Database[1]
PrgMap$Database[2]
shiny::runApp('Documents/Coursera_R/Dashboard')
shiny::runApp('Documents/Coursera_R/Dashboard')
View(PrgMap)
PrgMap$Database
shiny::runApp('Documents/Coursera_R/Dashboard')
shiny::runApp('Documents/Coursera_R/Dashboard')
shiny::runApp('Documents/Coursera_R/Dashboard')
library(RODBC)
#ch <- dbConnect(C:/Windows/ODBC.INI)
#dbhandle <- odbcDriverConnect('driver={SQL Server};server= W4-S129433\\CAPABILITYDB,1443;database=HDPacific;trusted_connection=true')
#res <- sqlQuery(dbhandle, 'select * from information_schema.tables')
#ibrary(RSQLServer)
#m<-dbDriver("RODBC")
library(RSQLServer)
conn <-odbcConnect("Capability") # Capability is the ODBC name.
# To remove rm(list=ls())
trucks <- sqlQuery(conn,'Select * FROM Seahawk.dbo.tblTrucks')
close(conn)
library(RODBC)
#ch <- dbConnect(C:/Windows/ODBC.INI)
#dbhandle <- odbcDriverConnect('driver={SQL Server};server= W4-S129433\\CAPABILITYDB,1443;database=HDPacific;trusted_connection=true')
#res <- sqlQuery(dbhandle, 'select * from information_schema.tables')
#ibrary(RSQLServer)
#m<-dbDriver("RODBC")
library(RSQLServer)
conn <-odbcConnect("Capability") # Capability is the ODBC name.
# To remove rm(list=ls())
trucks <- sqlQuery(conn,'Select * FROM Seahawk.dbo.tblTrucks')
library(RODBC)
#ch <- dbConnect(C:/Windows/ODBC.INI)
#dbhandle <- odbcDriverConnect('driver={SQL Server};server= W4-S129433\\CAPABILITYDB,1443;database=HDPacific;trusted_connection=true')
#res <- sqlQuery(dbhandle, 'select * from information_schema.tables')
#ibrary(RSQLServer)
#m<-dbDriver("RODBC")
library(RSQLServer)
conn <-odbcConnect("Capability") # Capability is the ODBC name.
# To remove rm(list=ls())
trucks <- sqlQuery(conn,'Select * FROM Seahawk.dbo.tblTrucks')
library(RODBC)
library(RSQLServer)
conn <-odbcConnect("Capability")
trucks <- sqlQuery(conn,'Select * FROM Seahawk.dbo.tblTrucks')
close.connection(conn)
odbcClose(conn)
trucks <- sqlQuery(conn,'Select * FROM Seahawk.dbo.tblTrucks')
odbcClose(conn)
conn
conn <-odbcConnect("Capability")
obdbcClose
odbcClose()
odbcCloseAll()
odbcCloseAll()
odbcCloseAll()
shiny::runApp('Documents/Coursera_R/Dashboard')
shiny::runApp('Documents/Coursera_R/Dashboard')
shiny::runApp('Documents/Coursera_R/Dashboard')
shiny::runApp('Documents/Coursera_R/Dashboard')
PrgMap
PrgMap$Database
which(PrgMap$Programs == "Pick up")
which(PrgMap$Programs == "Chasis Cab")
which(PrgMap$Programs == "Pick Up")
PrgMap$Database[[which(PrgMap$Programs==input$Program)]]
selectInput(inputId = "Program",label = "Choose the Program", choices = PrgMap$Programs,selected = PrgMap$Programs[[1]]),
selectInput(inputId = "Program",label = "Choose the Program", choices = PrgMap$Programs,selected = PrgMap$Programs[[1]])
PrgMap$Database[[which(PrgMap$Programs==input$Program)]]
shiny::runApp('Documents/Coursera_R/Dashboard')
shiny::runApp('Documents/Coursera_R/Dashboard')
shiny::runApp('Documents/Coursera_R/Dashboard')
shiny::runApp('Documents/Coursera_R/Dashboard')
shiny::runApp('Documents/Coursera_R/Dashboard')
shiny::runApp('Documents/Coursera_R/Dashboard')
Sys.Date()
Sys.time()
par(op)
rm(ls())
rm(list=ls())
source('~/.active-rstudio-document')
shiny::runApp('Documents/Coursera_R/Dashboard')
paste("select DataValue,TruckName, CalibrationVersion FROM ",
PrgMap$Database[[which(PrgMap$Programs == input$Program)]],
tbl, "JOIN", PrgMap$Database[[which(PrgMap$Programs ==
input$Program)]], ".dbo. tblTrucks on", PrgMap$Database[[which(PrgMap$Programs ==
input$Program)]], tbl, ".TruckID = ", PrgMap$Database[[which(PrgMap$Programs ==
input$Program)]], ".dbo.tblTrucks.TruckID", WhereClause)
shiny::runApp('Documents/Coursera_R/Dashboard')
rm(list=ls())
Value <- "DataMin , DataMax"
Value
library(RODBC)
library(RSQLServer)
library(ggplot2)
source('~/Documents/Coursera_R/Dashboard/POSIXt2matlabUTC.R')
# connect to the server need to be going to global.R at a later stage.
conn <-odbcConnect("Capability")
PrgMap <- list(Programs = c("Pick Up", "Chasis Cab"), Database = c("Seahawk", "DragonCC"))
def_trk <- sqlQuery(conn, paste("select [TruckName] from",PrgMap$Database[[1]],".dbo. tblTrucks"))
DiagList <- sqlQuery(conn, paste("select * from",PrgMap$Database[[1]],".dbo. tblProcessingInfo"))
SoftwareBuild <- sqlQuery(conn,paste("Select distinct calibration from",PrgMap$Database[[1]], " .dbo.tblDataInBuild"))
trucks <- sqlQuery(conn, paste("select * from",PrgMap$Database[[1]],".dbo. tblTrucks"))
View(DiagList)
DiagList[1,6]
is.na(DiagList[1,6])
shiny::runApp('Documents/Coursera_R/Dashboard')
paste("select TruckName, CalibrationVersion FROM ",
Value, PrgMap$Database[[which(PrgMap$Programs == input$Program)]],
tbl, "JOIN", PrgMap$Database[[which(PrgMap$Programs ==
input$Program)]], ".dbo. tblTrucks on", PrgMap$Database[[which(PrgMap$Programs ==
input$Program)]], tbl, ".TruckID = ", PrgMap$Database[[which(PrgMap$Programs ==
input$Program)]], ".dbo.tblTrucks.TruckID", WhereClause)
shiny::runApp('Documents/Coursera_R/Dashboard')
View(Data)
Value
paste("select", Value, "TruckName, CalibrationVersion FROM ",
PrgMap$Database[[which(PrgMap$Programs == input$Program)]],
tbl, "JOIN", PrgMap$Database[[which(PrgMap$Programs ==
input$Program)]], ".dbo. tblTrucks on", PrgMap$Database[[which(PrgMap$Programs ==
input$Program)]], tbl, ".TruckID = ", PrgMap$Database[[which(PrgMap$Programs ==
input$Program)]], ".dbo.tblTrucks.TruckID", WhereClause)
shiny::runApp('Documents/Coursera_R/Dashboard')
shiny::runApp('Documents/Coursera_R/Dashboard')
View(Data)
y = Value
y
eval(Value)
shiny::runApp('Documents/Coursera_R/Dashboard')
shiny::runApp('Documents/Coursera_R/Dashboard')
shiny::runApp('Documents/Coursera_R/Dashboard')
eval("Value")
eval(Value)
shiny::runApp('Documents/Coursera_R/Dashboard')
eval(Value)
Data$eval(Value)
p <- ggplot(data = Data, aes(x = TruckName, y = eval(Value),
color = TruckName)) + geom_boxplot(outlier.colour = "white") +
geom_jitter(position = position_jitter(0.1, 0)) +
coord_flip() + theme_bw()
print(p)
q <- ggplot(Data, aes(x = eval(Value))) + geom_histogram(bandwidth = 0.5,
colour = "black", fill = "white") + theme_bw()
print(q)
Min(Data$DataMin)
summary(Data$DataMin)
shiny::runApp('Documents/Coursera_R/Dashboard')
View(DiagList)
shiny::runApp('Documents/Coursera_R/Dashboard')
LSL
shiny::runApp('Documents/Coursera_R/Dashboard')
paste("select", Value, ",TruckName, CalibrationVersion FROM ",
PrgMap$Database[[which(PrgMap$Programs == input$Program)]],
tbl, "JOIN", PrgMap$Database[[which(PrgMap$Programs ==
input$Program)]], ".dbo. tblTrucks on", PrgMap$Database[[which(PrgMap$Programs ==
input$Program)]], tbl, ".TruckID = ", PrgMap$Database[[which(PrgMap$Programs ==
input$Program)]], ".dbo.tblTrucks.TruckID", WhereClause)
paste(as.character(PID)
)
as.character(PID)
PID
paste0(PID,collapse = ",")
s <- c(1,2,3)
paste(s,collapse = ",")
paste(PID,collapse = ",")
paste(as.character(s),collapse = ",")
paste0(as.numeric(PID),collapse = ",")
paste0(as.character(as.numeric(PID)),collapse = ",")
as.numeric(PID)
str(PID)
paste(PID$PublicDataID, collapse = ",")
shiny::runApp('Documents/Coursera_R/Dashboard')
shiny::runApp('Documents/Coursera_R/Dashboard')
shiny::runApp('Documents/Coursera_R/Dashboard')
qplot(data = Data,aes(y = DataValue))+ geom_point()
qplot(data = Data,aes(DataValue))+ geom_point()
View(Data)
install.packages("R.Matlab")
install.packages("R.matlab")
library(R.matlab)
data <- readMat('C:/Users/ku906/Desktop/AnimationScatterPlot/Seahawk_PMSC_KEYON.mat')
rm(list=ls())
Data <- readMat('C:/Users/ku906/Desktop/AnimationScatterPlot/Seahawk_PMSC_KEYON.mat')
str(Data)
head(Data)
Data$Data["Key.Switch"]
Data[[1]]
Data[[1]][1]
Data[[1]]
id <- which(Data[[1]][4]==0)
id <- which(Data[1][4]==0)
Data[1][4]
Data[[1]][4]
which(Data[[1]][4]==0)
EngSpeed <- Data[[1][4]
EngSpeed <- Data[[1]][4]
id <- which(EngSpeed==0)
str(EngSpeed)
EngSpeed <- as.numeric(Data[[1]][4])
EngSpeed[1]
EngSpeed <- as.numeric(EngSpeed[1])
EngSpeed <- as.numeric(EngSpeed[[1])
EngSpeed <- as.numeric(EngSpeed[[1]])
id <- which(EngSpeed==0)
plot(EngSpeed)
plot(Data[[1]][1][id])
RefMonDiff <- as.numeric(Data[[1]][[1]])
KeySwitch <- as.numeric(Data[[1]][[2]])
ModuleTimeOFf <- as.numeric(Data[[1]][[3]])
Data[[1]]
Truck <- as.numeric(Data[[1]][[5]])
Truck <- as.character(Data[[1]][[5]])
Datenum <- as.numeric(Data[[1]][[6]])
rm(Data)
tgt <- RefMonDiff[intersect(which(EngSpeed==0),which(KeySwitch==1))]
plot(tgt)
tgt <- RefMonDiff[intersect(which(EngSpeed==0),which(KeySwitch==1),which(ModuleTimeOFf >= 8*3600))]
tgt <- RefMonDiff[intersect(which(EngSpeed==0),which(KeySwitch==1),which(ModuleTimeOFf >= (8*3600))]
tgt <- RefMonDiff[intersect(which(EngSpeed==0),which(KeySwitch==1),which(ModuleTimeOFf >= 28800))]
tgt <- RefMonDiff[intersect(which(EngSpeed==0),which(KeySwitch==1),which(ModuleTimeOFf > 28799))]
id2 <- which(ModuleTimeOFf>=28800)
tgt <- RefMonDiff[intersect(which(EngSpeed==0),which(KeySwitch==1),id2)]
tgt <- RefMonDiff[intersect(intersect(which(EngSpeed==0),which(KeySwitch==1)),id2)]
plot(tg2)
plot(tgt)
hist(tgt)
library(ggplot2)
Data <- cbind(Datenum[intersect(intersect(which(EngSpeed==0),which(KeySwitch==1)),id2)],EngSpeed[intersect(intersect(which(EngSpeed==0),which(KeySwitch==1)),id2)],KeySwitch[intersect(intersect(which(EngSpeed==0),which(KeySwitch==1)),id2)],ModuleTimeOFf[intersect(intersect(which(EngSpeed==0),which(KeySwitch==1)),id2)],Truck[intersect(intersect(which(EngSpeed==0),which(KeySwitch==1)),id2)])
View(Data)
setNames(Data,c("Datenum","EngSpeed","KeySwitch","ModuleTimeOFF","Truck"))
View(Data)
Data <- cbind(Datenum[intersect(intersect(which(EngSpeed==0),which(KeySwitch==1)),id2)],EngSpeed[intersect(intersect(which(EngSpeed==0),which(KeySwitch==1)),id2)],KeySwitch[intersect(intersect(which(EngSpeed==0),which(KeySwitch==1)),id2)],ModuleTimeOFf[intersect(intersect(which(EngSpeed==0),which(KeySwitch==1)),id2)],RefMonDiff[intersect(intersect(which(EngSpeed==0),which(KeySwitch==1)),id2)],Truck[intersect(intersect(which(EngSpeed==0),which(KeySwitch==1)),id2)])
Data<-setNames(Data,c("datenum","EngineSpeed","KeySwitch","ModuleTimeOFF","V_PMSC_trc_STD_RefMonDiff","Truck"))
View(Data)
Data$KeySwitch
Data
View(Data)
str(Data)
Data <- cbind(Datenum[intersect(intersect(which(EngSpeed==0),which(KeySwitch==1)),id2)],EngSpeed[intersect(intersect(which(EngSpeed==0),which(KeySwitch==1)),id2)],KeySwitch[intersect(intersect(which(EngSpeed==0),which(KeySwitch==1)),id2)],ModuleTimeOFf[intersect(intersect(which(EngSpeed==0),which(KeySwitch==1)),id2)],RefMonDiff[intersect(intersect(which(EngSpeed==0),which(KeySwitch==1)),id2)],Truck[intersect(intersect(which(EngSpeed==0),which(KeySwitch==1)),id2)])
View(Data)
colnames(Data,c("datenum","EngineSpeed","KeySwitch","ModuleTimeOFF","V_PMSC_trc_STD_RefMonDiff","Truck"))
str(Data)
Data <- cbind(Datenum[intersect(intersect(which(EngSpeed==0),which(KeySwitch==1)),id2)],EngSpeed[intersect(intersect(which(EngSpeed==0),which(KeySwitch==1)),id2)],KeySwitch[intersect(intersect(which(EngSpeed==0),which(KeySwitch==1)),id2)],ModuleTimeOFf[intersect(intersect(which(EngSpeed==0),which(KeySwitch==1)),id2)],RefMonDiff[intersect(intersect(which(EngSpeed==0),which(KeySwitch==1)),id2)],Truck[intersect(intersect(which(EngSpeed==0),which(KeySwitch==1)),id2)])
sapply(Data,class)
class(Data)
Data <- as.data.frame(Data)
View(Data)
colnames(Data,c("datenum","EngineSpeed","KeySwitch","ModuleTimeOFF","V_PMSC_trc_STD_RefMonDiff","Truck"))
Data<-setNames(Data,c("datenum","EngineSpeed","KeySwitch","ModuleTimeOFF","V_PMSC_trc_STD_RefMonDiff","Truck"))
View(Data)
p<- ggplot(data=Data,aes(x=Truck,y=V_PMSC_trc_STD_RefMonDiff,color=Truck))+ geom_boxplot(outlier.colour = "white")+ geom_jitter
p<- ggplot(data=Data,aes(x=Truck,y=V_PMSC_trc_STD_RefMonDiff,color=Truck))+ geom_boxplot(outlier.colour = "white")+ geom_jitter(position = position_jitter(0.1,0))+ coord_flip() + theme_bw()
print(p)
geom_boxplot(data = Data, x = Truck, y = V_PMSC_trc_STD_RefMonDiff)
ggplot(data=Data,aes(Truck,V_PMSC_trc_STD_RefMonDiff))+ geom_boxplot()
qplot(data=Data,aes(Truck,V_PMSC_trc_STD_RefMonDiff))
qplot(data=Data,aes(Truck,V_PMSC_trc_STD_RefMonDiff)) + geom_point()
boxplot(Data$Truck,Data$V_PMSC_trc_STD_RefMonDiff)
boxplot(Data$V_PMSC_trc_STD_RefMonDiff)
boxplot(as.numeric(Data$V_PMSC_trc_STD_RefMonDiff))
boxplot(Data$Truck,as.numeric(Data$V_PMSC_trc_STD_RefMonDiff))
p<- ggplot(data=Data,aes(x=Truck,y=V_PMSC_trc_STD_RefMonDiff,color=Truck))+ geom_boxplot(outlier.colour = "white")+ geom_jitter(position = position_jitter(0.1,0))+ coord_flip() + theme_bw()+ geom_abline(y=43)
p<- ggplot(data=Data,aes(x=Truck,y=V_PMSC_trc_STD_RefMonDiff,color=Truck))+ geom_boxplot(outlier.colour = "white")+ geom_jitter(position = position_jitter(0.1,0))+ coord_flip() + theme_bw()+ geom_abline(intercept = 43, slope = 0)
View(Data)
save.image("~/Desktop/AnimationScatterPlot/V_PMSC_trc_STD_RefMonDiff.RData")
shiny::runApp('Documents/Coursera_R/Dashboard')
shiny::runApp('Documents/Coursera_R/Dashboard')
shiny::runApp('Documents/Coursera_R/Dashboard')
Value
eval("Value")
eval(Value)
ggplot(data = Data,aes(x=TruckName,y=eval(Value),color = TruckName))+geom_boxplot(outlier.colour = "white")+  geom_jitter(position = position_jitter(0.1,0)) + coord_flip()+ theme_bw()
ggplot(data = Data,aes(x=TruckName,y=DataValue,color = TruckName))+geom_boxplot(outlier.colour = "white")+  geom_jitter(position = position_jitter(0.1,0)) + coord_flip()+ theme_bw()
ggplot(data = Data,aes(x=TruckName,y=DataValue,color = TruckName))+geom_boxplot(outlier.colour = "white")+  geom_jitter(position = position_jitter(0.1,0)) + coord_flip()+ theme_bw()
get(Value)
rm(list=ls())
shiny::runApp('Documents/Coursera_R/Dashboard')
shiny::runApp('Documents/Coursera_R/Dashboard')
Value
get(Value)
p <-ggplot(data = Data,aes(x=TruckName,y=get(Value),color = TruckName))+geom_boxplot(outlier.colour = "white")+  geom_jitter(position = position_jitter(0.1,0)) + coord_flip()+ theme_bw()
print(p)
Data[get(Value)]
Data$get(Value)
library(RODBC)
library(RSQLServer)
conn2 <- odbcConnect("IUPR")
conn2
truck <- sqlQuery(conn2,"select * from tblTrucks")
View(truck)
truck <- sqlQuery(conn2,"select * from Seahawk.dbo.tblTrucks")
conn <-odbcConnect("Capability")
truck2 <- sqlQuery(conn,"select * from tblTrucks")
View(truck2)
shiny::runApp('Documents/Coursera_R/Dashboard')
shiny::runApp('Documents/Coursera_R/Dashboard')
shiny::runApp('Documents/Coursera_R/Dashboard')
shiny::runApp('Documents/Coursera_R/Dashboard')
.libPaths()
RInside
RInside()
shiny::runApp('Documents/Coursera_R/Dashboard')
.libPaths("C:/Users/ku906/R/win-library/3.1")
.libPaths()
.libPaths("Rcpp")
.libPaths()
.libPaths("C:/Program Files/R/R-3.1.2/library")
shiny::runApp('Documents/Coursera_R/Dashboard')
version
shiny::runApp('Documents/Coursera_R/Dashboard')
.libPaths("C:/Users/ku906/R/win-library/3.1")
.libPaths()
.libPaths("C:/Users/ku906/R/win-library/3.1")
.libPaths()
shiny::runApp('Documents/Coursera_R/Dashboard')
install.packages("Rcpp")
shiny::runApp('Documents/Coursera_R/Dashboard')
install.packages("Rcpp")
setwd("~/Documents/Coursera_R/Dashboard")
shiny::runApp()
install.packages("Rcpp")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
options(shiny.error=recover)
shiny::runApp()
shiny::runApp()
